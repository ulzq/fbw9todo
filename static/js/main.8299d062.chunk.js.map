{"version":3,"sources":["component/Eingabe.js","component/TodoEintrag.js","component/TodoListe.js","App.js","serviceWorker.js","index.js"],"names":["Eingabe","hinzufuegen","titel","React","useState","eingabe","eingabeSetzen","InputGroup","FormControl","value","onChange","e","target","Append","Button","onClick","TodoEintrag","wert","loeschen","key","width","TodoListe","todoDefault","todo","Table","striped","bordered","hover","variant","map","nummer","bind","JSON","parse","localStorage","getItem","listeSpeichern","liste","setItem","stringify","App","setzeTodo","neueListe","filter","_","n","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8299d062.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { Button, FormControl, InputGroup } from 'react-bootstrap'\n\nfunction Eingabe({hinzufuegen,titel}){\n\n  const [eingabe,eingabeSetzen] = React.useState('');\n\n  const eingabeHaendler = (e) =>\n    eingabeSetzen(e.target.value)\n\n  const hinzufuegenHaendler = e => {\n    hinzufuegen(eingabe);\n    eingabeSetzen('');\n  }\n\n  return (\n    <InputGroup>\n      <FormControl value={eingabe} onChange={eingabeHaendler}/>\n      <InputGroup.Append>\n        <Button onClick={hinzufuegenHaendler}>{titel}</Button>\n      </InputGroup.Append>\n    </InputGroup>\n)};\n\nexport default Eingabe;\n","\nimport React from 'react';\nimport { Button } from 'react-bootstrap'\n\nfunction TodoEintrag({wert,key,loeschen}){ return (\n  <tr>\n    <td>\n      {wert}\n    </td>\n    <td width=\"1%\">\n      <Button onClick={loeschen}>x</Button>\n    </td>\n  </tr>\n)};\n\nexport default TodoEintrag;\n","\nimport React from 'react'\nimport { Table } from 'react-bootstrap'\n\nimport TodoEintrag from './TodoEintrag'\n\nfunction TodoListe({todo,loeschen}){\n  return (\n    <Table striped bordered hover variant=\"dark\">\n      <tbody>{\n        todo.map( (wert,nummer)=>\n        <TodoEintrag key={nummer}\n          wert={wert}\n          loeschen={loeschen.bind(null,nummer)}\n        />)\n      }</tbody>\n    </Table>\n  );\n};\n\nexport default TodoListe;\n","\nimport React, { useState } from 'react';\n\nimport Eingabe   from './component/Eingabe'\nimport TodoListe from './component/TodoListe'\n\nlet todoDefault;\ntry {\n  todoDefault = JSON.parse(\n    localStorage.getItem('liste')\n  )||[];\n} catch (e){\n  todoDefault = [];\n};\n\nconst listeSpeichern = liste => {\n  try {\n    localStorage.setItem('liste',JSON.stringify(liste));\n  } catch(e){}\n}\n\nfunction App(){\n  const [ todo, setzeTodo ] = useState(todoDefault);\n\n  const loeschen = (nummer)=> {\n    const neueListe = todo.filter( (_,n)=> !( n === nummer ) );\n    setzeTodo( neueListe );\n    listeSpeichern( neueListe );\n  }\n\n  const hinzufuegen = (eingabe) => {\n    const neueListe = [eingabe,...todo];\n    setzeTodo( neueListe );\n    listeSpeichern( neueListe );\n  }\n\n  return (\n  <>\n    <Eingabe hinzufuegen={hinzufuegen} titel=\"+\"/>\n    <TodoListe todo={todo} loeschen={loeschen}/>\n  </>\n)};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('todo')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}